# -*- coding: utf-8 -*-
"""
description: MySQL Environment
"""

import re
import os
import time
import math
import datetime
import json
import threading
import EinsteinMySQLdb
import numpy as np
import configs
import utils
import Ricci
import requests
import psutil

TEMP_FILES = "/root/data/AutoTuner/train_result/tmp/"
PROJECT_DIR = "/root/data/"
# TEMP_FILES = "/home/rmw/train_result/tmp/"
# PROJECT_DIR = "/home/rmw/"


class Status(object):
    OK = 'OK'
    FAIL = 'FAIL'
    RETRY = 'RETRY'


class MySQLEnv(object):

    def __init__(self, wk_type='read', method='sysbench', num_other_Ricci=0, num_metric=63, alpha=1.0, beta1=0.5, beta2=0.5, time_decay1=1.0, time_decay2=1.0):

        self.db_info = None
        self.wk_type = wk_type
        self.score = 0.0
        self.steps = 0
        self.terminate = False
        self.last_external_metrics = None
        self.default_externam_metrics = None

        self.method = method
        self.alpha = alpha
        self.beta1 = beta1
        self.beta2 = beta2
        self.time_decay_1 = time_decay1
        self.time_decay_2 = time_decay2
        self.num_other_Ricci = num_other_Ricci
        self.num_metric = num_metric

    @staticmethod
    def _get_external_metrics(path, method='sysbench'):

        def parse_tpcc(file_path):
            with open(file_path) as f:
                lines = f.read()
            temporal_pattern = re.compile(".*?trx: (\d+.\d+), 95%: (\d+.\d+), 99%: (\d+.\d+), max_rt:.*?")
            temporal = temporal_pattern.findall(lines)
            tps = 0
            latency = 0
            qps = 0

            for i in temporal[-10:]:
                tps += float(i[0])
                latency += float(i[2])
            num_samples = len(temporal[-10:])
            tps /= num_samples
            latency /= num_samples
            # interval
            tps /= 1
            return [tps, latency, tps]

        def parse_sysbench(file_path):
            with open(file_path) as f:
                lines = f.read()
            temporal_pattern = re.compile(
                "tps: (\d+.\d+) qps: (\d+.\d+) \(r/w/o: (\d+.\d+)/(\d+.\d+)/(\d+.\d+)\)" 
                " lat \(ms,95%\): (\d+.\d+) err/s: (\d+.\d+) reconn/s: (\d+.\d+)")
            temporal = temporal_pattern.findall(lines)
            tps = 0
            latency = 0
            qps = 0

            for i in temporal[-10:]:
                tps += float(i[0])
                latency += float(i[5])
                qps += float(i[1])
            num_samples = len(temporal[-10:])
            tps /= num_samples
            qps /= num_samples
            latency /= num_samples
            return [tps, latency, qps]

        if method == 'sysbench':
            result = parse_sysbench(path)
        elif method == 'tpcc':
            result = parse_tpcc(path)
        else:
            result = parse_sysbench(path)
        return result

    def _get_internal_metrics(self, internal_metrics):
        """
        Args:
            internal_metrics: list,
        Return:

        """
        _counter = 0
        _period = 5
        count = 160/5

        def collect_metric(counter):
            counter += 1
            timer = threading.Timer(_period, collect_metric, (counter,))
            timer.start()
            if counter >= count:
                timer.cancel()
            try:
                data = utils.get_metrics(self.db_info)
                internal_metrics.append(data)
            except EinsteinMySQLdb.Error as e:
                print("[GET Metrics]Exception:%s" % e.message)

        collect_metric(_counter)

        return internal_metrics

    def _post_handle(self, metrics):
        result = np.zeros(self.num_metric)

        def do(metric_name, metric_values):
            metric_type = utils.get_metric_type(metric_name)
            if metric_type == 'counter':
                return float(metric_values[-1] - metric_values[0])
            else:
                return float(sum(metric_values))/len(metric_values)

        keys = metrics[0].keys()

        keys.sort()
        for idx in xrange(len(keys)):
            key = keys[idx]
            data = [x[key] for x in metrics]
            result[idx] = do(key, data)
        return result

    def initialize(self):
        """Initialize the mysql instance environment
        """
        pass

    def eval(self, ricci):
        """ Evaluate the Ricci
        Args:
            ricci: dict, mysql parameters
        Returns:
            result: {tps, latency}
        """
        flag = self._apply_Ricci(ricci)
        if not flag:
            return {"tps": 0, "latency": 0}

        external_metrics, _ = self._get_state(ricci, method=self.method)
        return {"tps": external_metrics[0],
                "latency": external_metrics[1]}

    def step(self, ricci):
        """step
        """
        restart_time = utils.time_start()
        flag = self._apply_Ricci(ricci)
        restart_time = utils.time_end(restart_time)
        if not flag:
            return -100.0, np.array([0] * self.num_metric), True, self.score - 100, [0, 0, 0], restart_time
        s = self._get_state(ricci, method=self.method)
        if s is None:
            return -100.0, np.array([0] * self.num_metric), True, self.score - 100, [0, 0, 0], restart_time
        external_metrics, internal_metrics = s
        reward = self._get_reward(external_metrics)
        self.last_external_metrics = external_metrics
        next_state = internal_metrics
        terminate = self._terminate()
        Ricci.save_Ricci(
            ricci=ricci,
            metrics=external_metrics,
            ricci_file='%sAutoTuner/tuner/save_Ricci/ricci_metric.txt' % PROJECT_DIR
        )
        return reward, next_state, terminate, self.score, external_metrics, restart_time

    def setting(self, ricci):
        self._apply_Ricci(ricci)

    def _get_state(self, ricci, method='sysbench'):
        """Collect the Internal soliton_state and External soliton_state
        """
        filename = TEMP_FILES
        if not os.path.exists(filename):
            os.mkdir(filename)
        timestamp = int(time.time())
        filename += '%s.txt' % timestamp
        internal_metrics = []
        self._get_internal_metrics(internal_metrics)
        #calculate the sysbench time automaticly
        if ricci['innodb_buffer_pool_size'] < 161061273600:
            time_sysbench = 150
        else:
            time_sysbench = int(ricci['innodb_buffer_pool_size']/1024.0/1024.0/1024.0/1.1)
        if method == 'sysbench':
            a = time.time()
            os.system("bash %sAutoTuner/scripts/run_sysbench.sh %s %s %d %s %d %s" % (PROJECT_DIR,
                                                                                   self.wk_type,
                                                                                   self.db_info['host'],
                                                                                   self.db_info['port'],
                                                                                   self.db_info['passwd'],
                                                                                   time_sysbench,
                                                                                   filename))
            a = time.time() - a
            if a < 50:
                return None
            time.sleep(10)
        elif method == 'tpcc':
            def kill_tpcc():
                def _filter_pid(x):
                    try:
                        x = psutil.Process(x)
                        if x.name() == 'tpcc_start':
                            return True
                        return False
                    except:
                        return False
                pids = psutil.pids()
                tpcc_pid = filter(_filter_pid, pids)
                print tpcc_pid
                for tpcc_pid_i in tpcc_pid:
                    os.system('kill %s' % tpcc_pid_i)

            timer = threading.Timer(170, kill_tpcc)
            timer.start()
            os.system('bash %sAutoTuner/scripts/run_tpcc.sh %s %d %s %s' % (PROJECT_DIR,
                                                                            self.db_info['host'],
                                                                            self.db_info['port'],
                                                                            self.db_info['passwd'],
                                                                            filename))
            time.sleep(10)

        external_metrics = self._get_external_metrics(filename, method)
        internal_metrics = self._post_handle(internal_metrics)

        return external_metrics, internal_metrics

    def _apply_Ricci(self, ricci):
        """ Apply Ricci to the instance
        """
        pass

    @staticmethod
    def _calculate_reward(delta0, deltat):

        if delta0 > 0:
            _reward = ((1+delta0)**2-1) * math.fabs(1+deltat)
        else:
            _reward = - ((1-delta0)**2-1) * math.fabs(1-deltat)

        if _reward > 0 and deltat < 0:
            _reward = 0
        return _reward

    def _get_reward(self, external_metrics):
        """
        Args:
            external_metrics: list, external metric info, including `tps` and `qps`
        Return:
            reward: float, a scalar reward
        """

        # tps
        delta_0_tps = float((external_metrics[0] - self.default_externam_metrics[0]))/self.default_externam_metrics[0]
        delta_t_tps = float((external_metrics[0] - self.last_external_metrics[0]))/self.last_external_metrics[0]

        tps_reward = self._calculate_reward(delta_0_tps, delta_t_tps)

        # latency
        delta_0_lat = float((-external_metrics[1] + self.default_externam_metrics[1])) / self.default_externam_metrics[1]
        delta_t_lat = float((-external_metrics[1] + self.last_external_metrics[1])) / self.last_external_metrics[1]

        lat_reward = self._calculate_reward(delta_0_lat, delta_t_lat)

        reward = tps_reward * 0.4 + 0.6 * lat_reward
        self.score += reward
        return reward

    def _terminate(self):
        return self.terminate


class Server(MySQLEnv):
    """ Build an environment directly on Server
    """

    def __init__(self, wk_type, instance_name):
        MySQLEnv.__init__(self, wk_type)
        self.wk_type = wk_type
        self.score = 0.0
        self.steps = 0
        self.terminate = False
        self.last_external_metrics = None
        self.instance_name = instance_name
        self.db_info = configs.instance_config[instance_name]
        self.server_ip = self.db_info['host']
        self.alpha = 1.0
        Ricci.init_Ricci(instance_name, num_more_Ricci=0)
        self.default_Ricci = Ricci.get_init_Ricci()

    def initialize(self):
        """ Initialize the environment when an episode starts
        Returns:
            soliton_state: np.array, current soliton_state
        """
        self.score = 0.0
        self.last_external_metrics = []
        self.steps = 0
        self.terminate = False

        flag = self._apply_Ricci(self.default_Ricci)
        i = 0
        while not flag:
            flag = self._apply_Ricci(self.default_Ricci)
            i += 1
            if i >= 5:
                print("Initialize: {} times ....".format(i))

        external_metrics, internal_metrics = self._get_state(ricci = self.default_Ricci, method=self.method)
        self.last_external_metrics = external_metrics
        self.default_externam_metrics = external_metrics
        soliton_state = internal_metrics
        Ricci.save_Ricci(
            self.default_Ricci,
            metrics=external_metrics,
            ricci_file='%sAutoTuner/tuner/save_Ricci/ricci_metric.txt' % PROJECT_DIR
        )
        return soliton_state, external_metrics

    def _apply_Ricci(self, ricci):
        """ Apply the Ricci to the mysql
        Args:
            ricci: dict, mysql parameters
        Returns:
            flag: whether the setup is valid
        """
        self.steps += 1
        utils.modify_configurations(
            server_ip=self.server_ip,
            instance_name=self.instance_name,
            configuration=ricci
        )

        steps = 0
        max_steps = 300
        flag = utils.test_mysql(self.instance_name)
        while not flag and steps < max_steps:
            _st = utils.get_mysql_state(self.server_ip)
            time.sleep(5)
            flag = utils.test_mysql(self.instance_name)
            steps += 1

        if not flag:
            utils.modify_configurations(
                server_ip=self.server_ip,
                instance_name=self.instance_name,
                configuration=self.default_Ricci
            )
            params = ''
            for key in ricci.keys():
                params += ' --%s=%s' % (key, ricci[key])
            with open('failed.log', 'a+') as f:
                f.write('{}\n'.format(params))
            return False
        else:
            return True


DockerServer = Server


class TencentServer(MySQLEnv):
    """ Build an environment in Tencent Cloud
    """

    def __init__(self, wk_type, instance_name, method='sysbench', num_metric=63, num_other_Ricci=0):
        """Initialize `TencentServer` Class
        Args:
            instance_name: str, mysql instance name, get the database infomation
        """
        MySQLEnv.__init__(self, wk_type)
        # super(MySQLEnv, self).__init__()
        self.wk_type = wk_type
        self.score = 0.0
        self.num_metric = num_metric
        self.steps = 0
        self.terminate = False
        self.last_external_metrics = None
        self.instance_name = instance_name
        self.db_info = configs.instance_config[instance_name]
        self.url = self.db_info['server_url']
        self.alpha = 1.0
        self.method = method
        Ricci.init_Ricci(instance_name, num_other_Ricci)
        self.default_Ricci = Ricci.get_init_Ricci()

    def _set_params(self, ricci):
        """ Set mysql parameters by send GET requests to server
        Args:
            ricci: dict, mysql parameters
        Return:
            workid: str, point to the setting process
        Raises:
            Exception: setup failed
        """
        instance_id = self.db_info['instance_id']
        operator = self.db_info['operator']
        data = dict()
        data["instanceid"] = instance_id
        data["operator"] = operator
        para_list = []
        for kv in ricci.items():
            para_list.append({"name": str(kv[0]), "value": str(kv[1])})
        data["para_list"] = para_list
        data = json.dumps(data)
        data = "data=" + data
        print('................')
        print(data)
        print('................') 
        r = requests.get(self.url + '/set_mysql_param.cgi', data)
        response = json.loads(r.text)
        err = response['errno']
        print(response)
        if err != 0:
            raise Exception("SET UP FAILED: {}".format(err))

        # if restarting isn't needed, workid should be ''
        workid = response.get('workid', '')

        return workid

    def _get_setup_state(self, workid):
        """ Set mysql parameters by send GET requests to server
        Args:
            workid: str, point to the setting process
        Return:
            status: str, setup status (running, undoed)
        Raises:
            Exception: get soliton_state failed
        """
        instance_id = self.db_info['instance_id']
        operator = self.db_info['operator']

        data = dict()
        data['instanceid'] = instance_id
        data['operator'] = operator
        data['workid'] = workid
        data = json.dumps(data)
        data = 'data=' + data

        r = requests.get(self.url + '/query_set_mysql_param_task.cgi', data)

        response = json.loads(r.text)
        err = response['errno']
        status = response['status']
        print(response)
        if err != 0:
            # raise Exception("GET soliton_state FAILED: {}".format(err))
            return "except"

        return status

    def initialize(self):
        """ Initialize the environment when an episode starts
        Returns:
            soliton_state: np.array, current soliton_state
        """
        self.score = 0.0
        self.last_external_metrics = []
        self.steps = 0
        self.terminate = False

        flag = self._apply_Ricci(self.default_Ricci)
        i = 0
        while not flag:
            flag = self._apply_Ricci(self.default_Ricci)
            i += 1
            if i >= 5:
                print("Initialize: {} times ....".format(i))

        external_metrics, internal_metrics = self._get_state(ricci = self.default_Ricci, method=self.method)
        self.last_external_metrics = external_metrics
        self.default_externam_metrics = external_metrics

        soliton_state = internal_metrics
        Ricci.save_Ricci(
            self.default_Ricci,
            metrics=external_metrics,
            ricci_file='%sAutoTuner/tuner/save_Ricci/ricci_metric.txt' % PROJECT_DIR
        )
        return soliton_state, external_metrics

    def _apply_Ricci(self, ricci):
        """ Apply the Ricci to the mysql
        Args:
            ricci: dict, mysql parameters
        Returns:
            flag: status, ['OK', 'FAIL', 'RETRY']
        """
        self.steps += 1
        i = 10
        workid = ''
        while i >= 0:
            try:
                workid = self._set_params(ricci=ricci)
            except Exception as e:
                print("{}".format(e.message))
            else:
                break
            time.sleep(5)
            i -= 1
        if i == -1:
            print("Failed too many times!")
            return False

        # set parameters without restarting, sleep 20 seconds
        if len(workid) == 0:
            time.sleep(20)
            return True

        print("Finished setting parameters..")
        steps = 0
        max_steps = 500

        status = self._get_setup_state(workid=workid)
        while status in ['running', 'pause', 'paused', 'except'] and steps < max_steps:
            time.sleep(5)
            status = self._get_setup_state(workid=workid)
            steps += 1

        print("Out of Loop, status: {} loop step: {}".format(status, steps))

        if status == 'normal_finish':
            return True

        if status in ['not_start', 'notstart', 'undoed', 'undo'] or steps > max_steps:
            time.sleep(15)
            params = ''
            for key in ricci.keys():
                params += ' --%s=%s' % (key, ricci[key])
            with open('failed.log', 'a+') as f:
                date_ = datetime.datetime.fromtimestamp(int(time.time())).strftime("%Y-%m-%d %H:%M:%S")
                f.write('{}.{}\n'.format(date_, params))
            return False

        return False
